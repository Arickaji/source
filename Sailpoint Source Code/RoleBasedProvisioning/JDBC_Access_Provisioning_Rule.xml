<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="" id="" language="beanshell" modified="" name="JDBC_Access_Provisioning_Rule" type="JDBCProvision">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult"/>
  <Source>


  import sailpoint.object.*;

  import java.sql.Connection; 
  import java.sql.DriverManager; 
  import java.sql.PreparedStatement; 
  import java.sql.SQLException; 
  import java.sql.Types; 
  import java.util.List; 
  import sailpoint.api.SailPointContext; 
  import sailpoint.connector.JDBCConnector; 


  import sailpoint.object.Application; 
  import sailpoint.object.ProvisioningPlan; 
  import sailpoint.object.ProvisioningPlan.AccountRequest; 
  import sailpoint.object.ProvisioningPlan.AttributeRequest; 
  import sailpoint.object.ProvisioningPlan.PermissionRequest; 
  import sailpoint.object.ProvisioningResult; 
  import sailpoint.object.Schema; 
  import sailpoint.tools.xml.XMLObjectFactory; 
  import org.apache.commons.logging.LogFactory; 
  import org.apache.commons.logging.Log; 


  System.out.println("Plan in Provisioning Rule.....");
  System.out.println(plan.toXml());
  Log _log = LogFactory.getLog("RuleProvisionSampleDB"); 

  public String getAttributeRequestValue(AccountRequest acctReq, String attribute) { 
    if ( acctReq != null ) { 
      AttributeRequest attrReq = acctReq.getAttributeRequest(attribute); 
      if ( attrReq != null ) { 
        return attrReq.getValue(); 
      } 
    } 
    return null; 
  } 

  ProvisioningResult result = new ProvisioningResult(); 
  if ( plan != null ) { 
    _log.debug( "plan [" + plan.toXml() + "]" ); 

    List accounts = plan.getAccountRequests(); 
    if ( ( accounts != null ) &amp;&amp; ( accounts.size() > 0 ) ) { 
      for ( AccountRequest account : accounts ) { 
        try { 
          if ( AccountRequest.Operation.Create.equals( account.getOperation() ) ) { 

            //Ideally we should first check to see if the account already exists. 
            //As written, this just assumes it does not. 

            PreparedStatement statement1 = connection.prepareStatement( "CREATE USER ?@'localhost' IDENTIFIED BY ?;" ); 
            System.out.println("Name....."+getAttributeRequestValue(account,"User"));
            System.out.println("Password....."+ getAttributeRequestValue(account,"password"));
            String username=account.getNativeIdentity();
            String password=getAttributeRequestValue(account,"password");

            statement1.setString ( 1, username); 
            statement1.setString ( 2, password ); 

            statement1.executeUpdate(); 

            System.out.println("Provisioning Commited....");



            result.setStatus( ProvisioningResult.STATUS_COMMITTED ); 
            System.out.println("Provisioning Granted....");



          } 

          else if ( AccountRequest.Operation.Modify.equals( account.getOperation() ) 
                  ) { 
            // Modify account request -- change role 

          } 



          else if ( AccountRequest.Operation.Delete.equals( account.getOperation())){ 
            // Delete the account 
            ystem.out.println("Disable operation....");

            PreparedStatement statement = connection.prepareStatement( "DROP USER ?@'localhost';" ); 
            statement.setString ( 1, plan.getNativeIdentity() );
            statement.executeUpdate(); 
            result.setStatus( ProvisioningResult.STATUS_COMMITTED ); 
          } 

          else if ( AccountRequest.Operation.Disable.equals( account.getOperation() 
                                                           ) ) { 
            // Not supported. 
            System.out.println("Disable operation....");

            PreparedStatement statement = connection.prepareStatement( "DROP USER ?@'localhost';" ); 
            statement.setString ( 1, plan.getNativeIdentity() );
            statement.executeUpdate(); 
            result.setStatus( ProvisioningResult.STATUS_COMMITTED ); 
          }

        } 
        catch( SQLException e ) { 
          _log.error( e ); 
          result.setStatus( ProvisioningResult.STATUS_FAILED ); 
          result.addError( e ); 
        } 
      } 
    } 
  } 

  _log.debug( "result [" + result.toXml(false)+ "]"); 
  return result;

  </Source>
</Rule>
