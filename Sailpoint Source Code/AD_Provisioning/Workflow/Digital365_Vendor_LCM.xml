<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" name="Digital365_Vendor_LCM">
  <Variable input="true" name="workItemFormBasePath"/>
  <Variable name="identityModel">
    <Description>The identity model that is used to represent the identity being created.</Description>
  </Variable>
  <Variable name="identityDisplayName"/>
  <Variable name="notificationScheme"/>
  <Variable initializer="customCreate" name="flow"/>
  <Variable name="securityOfficerEmailTemplate"/>
  <Variable name="approverElectronicSignature"/>
  <Variable initializer="true" name="foregroundProvisioning"/>
  <Variable name="workItemPriority"/>
  <Variable name="planForm"/>
  <Variable name="securityOfficerName"/>
  <Variable name="fallbackApprover"/>
  <Variable name="doRefresh"/>
  <Variable name="ticketManagementApplication"/>
  <Variable name="approvalEmailTemplate"/>
  <Variable name="policyScheme"/>
  <Variable initializer="LCM" name="source"/>
  <Variable name="optimisticProvisioning"/>
  <Variable name="policiesToCheck"/>
  <Variable editable="true" name="project"/>
  <Variable initializer="true" name="transient">
    <Description>Set to false to cause workflow-related objects, such as approval
      work items, to be saved in the database even if they are only
      viewed by the person registering.</Description>
  </Variable>
  <Variable input="true" name="owner" required="true">
    <Description>Name of the user that will recieve the forms.</Description>
    <Script>
      <Source>
        return context.getUserName().toString();
      </Source>
    </Script>
  </Variable>
  <Variable name="approvalSet">
    <Description>This attributes is set during the &amp;amp;amp;amp;amp;quot;Build Approval Set&amp;amp;amp;amp;amp;quot; step,
      which builds this list by going through the ProvisioningPlan
      to build the line items that need to be approved,

      This variable includes all ApprovalItems that are part of
      the request process and is updated during the AfterScript
      of the approval process by assimilating the decisions
      and comments from the Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable initializer="none" input="true" name="approvalScheme">
    <Description>A String that specifies how approvals should be generated for
      this workflow there are three built-in modes

      none - disabled approvals

      manager - The user&amp;amp;amp;amp;amp;#39;s current manager will get approvals

      newManager - The newly assigned manager will get approvals when
      manager transfers occur. Otherwise the user&amp;amp;amp;amp;amp;#39;s manager
      current manager will be the approver.</Description>
  </Variable>
  <Variable initializer="serial" input="true" name="approvalMode">
    <Description>A string that specifies how we should handle the approvals.

      By default this is serial since most of these request with
      the exception of manager transfers will have only one approver.

      parallel
      Approvals are processed concurrently and there must be consensus,
      we wait for all approvers to approve.  The first approver that
      rejects terminates the entire approval.

      parallelPoll
      Approvals are processed concurrently but consensus is not required.
      All approvals will be process, we don&amp;amp;amp;amp;amp;#39;t stop if there any
      rejections.

      serial
      Approvals are processed one at a time and there must be consensus.
      The first approver that rejects terminates the entire approval.

      serialPoll
      Approvals are processed in order but consensus is not required.
      All approvals will be processed, we don&amp;amp;amp;amp;amp;#39;t stop if there are any
      rejections.  In effect we are &amp;amp;amp;amp;amp;quot;taking a poll&amp;amp;amp;amp;amp;quot; of the approvers.

      any
      Approvals are processed concurrently, the first approver to
      respond makes the decision for the group.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="false" name="trace">
    <Description>Used for debugging this workflow and when set to true trace
      will be sent to stdout.</Description>
  </Variable>
  <Variable editable="true" input="true" name="identityName">
    <Description>The name of the identity we&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;#39;re creating.</Description>
  </Variable>
  <Variable input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.</Description>
  </Variable>
  <Variable name="confirmationForm">
    <Description>A form that gets displayed for confirming the registration.</Description>
  </Variable>
  <Variable name="plan">
    <Description>The ProvisioningPlan that gets generated from the form input.</Description>
  </Variable>
  <Variable name="provisioningStatus" output="true">
    <Description>The AD provisioningStatus</Description>
  </Variable>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="26" posY="34">
    <Transition to="Initialize"/>
  </Step>
  <Step action="call:getIdentityModel" name="Initialize" posX="25" posY="116" resultVariable="identityModel">
    <Description>
      Initialize the data for the identity that we are creating.
    </Description>
    <Transition to="Identity Create Form"/>
  </Step>
  <Step icon="Approval" name="Identity Create Form" posX="25" posY="198">
    <Approval mode="serial" owner="ref:launcher" renderer="workItemForm.xhtml" return="identityModel">
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemDescription" value="CreateVendorForm"/>
      <Arg name="workItemForm" value="CreateVendorForm"/>
      <Arg name="workItemFormBasePath" value="identityModel"/>
      <Arg name="requester" value="owner"/>
      <Arg name="workItemRequester"/>
    </Approval>
    <Description>
      Display the registration form to collect information about the registrant.
    </Description>
    <Transition to="ReadOnly"/>
  </Step>
  <Step icon="Approval" name="ReadOnly" posX="680">
    <Approval mode="serial" owner="ref:launcher" renderer="workItemForm.xhtml" return="identityModel,enterWorkflow" send="requester,identityModel">
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemDescription" value="CreateVendorFormRO"/>
      <Arg name="workItemForm" value="CreateVendorFormRO"/>
      <Arg name="workItemFormBasePath" value="identityModel"/>
      <Arg name="requester" value="owner"/>
      <Arg name="workItemRequester" value="ref:launcher"/>
    </Approval>
    <Transition to="Identity Create Form" when="enterWorkflow"/>
    <Transition to="Print Values"/>
  </Step>
  <Step name="Print Values" posX="107" posY="199" resultVariable="identityModel">
    <Script>
      <Source> 
        ///System.out.println("Printing identitymodel: "+identityModel); 
        import java.util.*;

        Random rand=new Random();
        int employeeNum=rand.nextInt(999999-100000)+100000;

        String employeeNumber="V"+employeeNum;
        System.out.println(employeeNumber);

        identityModel.put("name",employeeNumber);
        identityModel.put("usertype","Vendor");
        workflow.put("identityName",employeeNumber);

        return identityModel;

      </Source>
    </Script>
    <Transition to="Build Provisioning Plan"/>
  </Step>
  <Step action="call:buildPlanFromIdentityModel" name="Build Provisioning Plan" posX="108" posY="44" resultVariable="plan">
    <Arg name="identityModel" value="ref:identityModel"/>
    <Description>
      Convert the registration request into a provisioning plan.
    </Description>
    <Transition to="Print Plan after Build"/>
  </Step>
  <Step name="Print Plan after Build">
    <Script>
      <Source>
        System.out.println("Plan......"+plan.toXml());
      </Source>
    </Script>
    <Transition to="LCM create and Update Step"/>
  </Step>
  <Step icon="Task" name="LCM create and Update Step" posX="420" posY="202">
    <Arg name="approvalScheme" value="ref:approvalScheme"/>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="policiesToCheck" value="ref:policiesToCheck"/>
    <Arg name="workItemPriority"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="approvalMode" value="ref:approvalMode"/>
    <Arg name="batchRequestItemId"/>
    <Arg name="trace"/>
    <Arg name="planForm" value="ref:planForm"/>
    <Arg name="doRefresh" value="ref:doRefresh"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="approverElectronicSignature" value="ref:approverElectronicSignature"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="notificationScheme" value="ref:notificationScheme"/>
    <Arg name="policyViolations"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="approvalForm"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="approvalEmailTemplate" value="ref:approvalEmailTemplate"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="securityOfficerEmailTemplate" value="ref:securityOfficerEmailTemplate"/>
    <Arg name="securityOfficerName" value="ref:securityOfficerName"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="ticketId"/>
    <Description>
      Call the LCM Create and Update workflow with the plan that was created.
    </Description>
    <Return name="identityName" to="identityName"/>
    <Script>
      <Source>
        //import org.apache.log4j.Logger;
        //Logger log = Logger.getLogger("Log");
        System.out.println("\n\nSubmit Registration Request");
      </Source>
    </Script>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Digital365 LCM Create and Update"/>
    </WorkflowRef>
    <Transition to="Print Values after identity creation"/>
  </Step>
  <Step name="Print Values after identity creation" posX="570" posY="201">
    <Script>
      <Source> 
        System.out.println("Printing identityname---------: "+identityName); 
      </Source>
    </Script>
    <Transition to="Get provisioning status"/>
  </Step>
  <Step name="Get provisioning status" resultVariable="provisioningStatus">
    <Script>
      <Source>
        import sailpoint.object.Identity;

        System.out.println("Inside Get Provisioning Status");

        Identity identity = context.getObjectByName(Identity.class,identityName);
        System.out.println("identity : " + identity);
        String status = (String) identity.getAttribute("isADSuccess");
        System.out.println("identity provisioning status : " + status);

        workflow.put("provisioningStatus",status);
        identity.setCorrelated(true);

        return status;

      </Source>
    </Script>
    <Transition to="Role Assignment"/>
  </Step>
  <Step name="Role Assignment">
    <Script>
      <Source>
        import sailpoint.object.*;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.api.Provisioner;
        import java.util.*;

        Identity id=context.getObjectByName(Identity.class,identityName);
        List attReqs=new ArrayList();
        if(id.getAttribute("department").equals("Account"))
        {
        attReqs.add(new AttributeRequest("assignedRoles",ProvisioningPlan.Operation.Add,"Account_Business_Role"));
        }
        else if(id.getAttribute("department").equals("IT"))
        {
        attReqs.add(new AttributeRequest("assignedRoles",ProvisioningPlan.Operation.Add,"IT_Business_Role"));
        }
        else if(id.getAttribute("department").equals("Sales"))
        {
        attReqs.add(new AttributeRequest("assignedRoles",ProvisioningPlan.Operation.Add,"IT_Business_Role"));
        }
        else
        {
        attReqs.add(new AttributeRequest("assignedRoles",ProvisioningPlan.Operation.Add,"Default_Business_Role"));
        }

        AccountRequest accReq=new AccountRequest();
        accReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        accReq.setApplication("IIQ");
        accReq.setAttributeRequests(attReqs);
        accReq.setNativeIdentity(identityName);
        List accReqs=new ArrayList();
        accReqs.add(accReq);
        ProvisioningPlan roleplan=new ProvisioningPlan();
        roleplan.setAccountRequests(accReqs);
        roleplan.setIdentity(id);
        Provisioner provisioner=new Provisioner(context);
        provisioner.setNoLocking(true);
        provisioner.execute(roleplan);


      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="570" posY="113"/>
</Workflow>