<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1574004715525" id="" language="beanshell" modified="" name="Employee_PreiterateRule" type="PreIterate">
  <Description>This rule is called before the connector processes the data in a file.</Description>
  <Signature returnType="void">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being iterated.
        </Description>
      </Argument>
      <Argument name="schema">
        <Description>
          Schema representing the data being iterated.
        </Description>
      </Argument>
      <Argument name="stats">
        <Description>
          A map passed by the connector of the stats for the file about to be iterated.
          Contains keys:
          fileName : (String) filename of the file about to be processed
          absolutePath : (String) absolute filename
          length : (Long) length in bytes
          lastModified : (Long) last time the file was updated Java GMT
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>import java.io.*;
  import java.util.*;
  import java.text.*;

  import sailpoint.api.*;
  import sailpoint.connector.*;
  import sailpoint.object.*;
  import sailpoint.task.*;
  import sailpoint.tools.*; 
  import java.util.stream.*;



  System.out.println("Context....."+context);

  System.out.println("Application...."+application);

  System.out.println("Schema...."+schema);

  System.out.println("Stats...."+stats);

  //Check all mandatory attributes are there or not
  List badRecordList = new ArrayList();

  int HEADER_COUNT=11;

  String filepath=(String)application.getAttributeValue("file");

  File file=new File(filepath);

  TaskManager managerTask = new TaskManager(context);
  if(file.exists())
  {
    FileInputStream fs=new FileInputStream(file);
    BufferedReader br=new BufferedReader(new InputStreamReader(fs));
    Stream lines=br.lines();
    Iterator iterator=lines.iterator();
    String columnStr=(String)iterator.next();
    String []columns=columnStr.split(";");
    List columnList=Arrays.asList(columns);
    int column_size=columnList.size();

    if(HEADER_COUNT!=column_size)
    {
      TaskResult result = context.getObject(TaskResult.class,"Employee Source Aggregation Task");
      managerTask.terminate(result);
      return;
    }
    else
    {
      // iterating records one by one,checking mandatory attribute and predefined values ate there or not.if there is any record without mandatory attributes and predefined values,adding that record to list object.
      while(iterator.hasNext())
      {
        String record = (String)iterator.next();
        if(record != null &amp;&amp; record.trim().length() > 0)
        {
          String []records=record.split(";");
          List recordList=Arrays.asList(records);
          
          //Bulid map from columns and records
          HashMap map = (HashMap) DelimitedFileConnector.defaultBuildMap(columnList, recordList);
          System.out.println("Map......"+map.toString());
          
          //Check whether first name is empty or not
          if(map.get("First_Name")!=null &amp;&amp; map.get("First_Name").length()>0)
          {
            System.out.println("Continue iteration.............");
            continue;
          }
          else
          {
            System.out.println("Exit task.............");
            TaskResult result = context.getObject(TaskResult.class,"Employee Source Aggregation Task");
            managerTask.terminate(result);
            return;
          }
        }
      }
    }


  }</Source>
</Rule>
